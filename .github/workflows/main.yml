name: Deploy Project on Tag

on:
  push:
    tags:
      - 'v*.*.*'
      - 'infra-*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.services.outputs.services }}
      tag_type: ${{ steps.tagtype.outputs.tag_type }}
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKER_IMAGE_TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Extract updated services from commit message
        id: services
        run: |
          message=$(git log -1 --pretty=format:%s)
          services=$(echo "$message" | grep -o -P "(?<=\().*?(?=\))")
          echo "services=$services" >> $GITHUB_OUTPUT

      - name: Detect tag type (infra or app)
        id: tagtype
        run: |
          tag="${{ github.ref_name }}"
          if [[ "$tag" == infra-* ]]; then
            echo "tag_type=infra" >> $GITHUB_OUTPUT
          else
            echo "tag_type=app" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker images
        run: |
          IFS=',' read -ra services_array <<< "${{ steps.services.outputs.services }}"
          for service in "${services_array[@]}"; do
            echo "🔍 Processing $service..."
            
            if [[ -f "services/$service/deploy/Dockerfile" ]]; then
              echo "🛠 Building service image: $service"
              docker build -t ${{ env.DOCKERHUB_USERNAME }}/$service:${{ env.DOCKER_IMAGE_TAG }} -f services/$service/deploy/Dockerfile .
              docker push ${{ env.DOCKERHUB_USERNAME }}/$service:${{ env.DOCKER_IMAGE_TAG }}
            
            elif [[ -f "infra/$service/Dockerfile" ]]; then
              echo "🛠 Building infra image: $service"
              docker build -t ${{ env.DOCKERHUB_USERNAME }}/$service:${{ env.DOCKER_IMAGE_TAG }} -f infra/$service/Dockerfile .
              docker push ${{ env.DOCKERHUB_USERNAME }}/$service:${{ env.DOCKER_IMAGE_TAG }}
            
            else
              echo "✅ Skipping public or unmanaged image: $service"
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DOCKER_IMAGE_TAG: ${{ github.ref_name }}

      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy Docker Compose to server
        run: |
          scp -o StrictHostKeyChecking=no deploy/docker-compose.yml ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }}:/home/${{ env.SERVER_USERNAME }}/gate

      - name: Deploy updated services via Docker Compose
        run: |
          IFS=',' read -ra services_array <<< "${{ needs.build.outputs.services }}"
          services_list=""
          for service in "${services_array[@]}"; do
            services_list+=" $service"
          done

          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }} << EOF
            cd /home/${{ env.SERVER_USERNAME }}/gate
            export VERSION=${{ env.DOCKER_IMAGE_TAG }}
            docker compose -f docker-compose.yml up -d $services_list
          EOF
