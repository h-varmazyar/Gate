// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: services/chipmunk/api/src/market.proto

package api

import (
	api "github.com/h-varmazyar/Gate/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarketStatus int32

const (
	Market_Disable MarketStatus = 0
	Market_Enable  MarketStatus = 1
)

// Enum value maps for MarketStatus.
var (
	MarketStatus_name = map[int32]string{
		0: "Disable",
		1: "Enable",
	}
	MarketStatus_value = map[string]int32{
		"Disable": 0,
		"Enable":  1,
	}
)

func (x MarketStatus) Enum() *MarketStatus {
	p := new(MarketStatus)
	*p = x
	return p
}

func (x MarketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_services_chipmunk_api_src_market_proto_enumTypes[0].Descriptor()
}

func (MarketStatus) Type() protoreflect.EnumType {
	return &file_services_chipmunk_api_src_market_proto_enumTypes[0]
}

func (x MarketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketStatus.Descriptor instead.
func (MarketStatus) EnumDescriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{0, 0}
}

type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"pricing_decimal"
	PricingDecimal float64 `protobuf:"fixed64,1,opt,name=PricingDecimal,proto3" json:"pricing_decimal"`
	// @inject_tag: json:"trading_decimal"
	TradingDecimal float64 `protobuf:"fixed64,2,opt,name=TradingDecimal,proto3" json:"trading_decimal"`
	// @inject_tag: json:"taker_fee_rate"
	TakerFeeRate float64 `protobuf:"fixed64,3,opt,name=TakerFeeRate,proto3" json:"taker_fee_rate"`
	// @inject_tag: json:"maker_fee_rate"
	MakerFeeRate float64 `protobuf:"fixed64,4,opt,name=MakerFeeRate,proto3" json:"maker_fee_rate"`
	// @inject_tag: json:"destination"
	Destination *Asset `protobuf:"bytes,5,opt,name=Destination,proto3" json:"destination"`
	// @inject_tag: json:"start_time"
	StartTime int64 `protobuf:"varint,6,opt,name=StartTime,proto3" json:"start_time"`
	// @inject_tag: json:"min_amount"
	MinAmount float64 `protobuf:"fixed64,7,opt,name=MinAmount,proto3" json:"min_amount"`
	// @inject_tag: json:"created_at"
	CreatedAt int64 `protobuf:"varint,8,opt,name=CreatedAt,proto3" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt int64 `protobuf:"varint,9,opt,name=UpdatedAt,proto3" json:"updated_at"`
	// @inject_tag: json:"source"
	Source *Asset `protobuf:"bytes,10,opt,name=Source,proto3" json:"source"`
	// @inject_tag: json:"is_amm"
	IsAMM bool `protobuf:"varint,11,opt,name=IsAMM,proto3" json:"is_amm"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,12,opt,name=Name,proto3" json:"name"`
	// @inject_tag: json:"id"
	ID string `protobuf:"bytes,13,opt,name=ID,proto3" json:"id"`
	// @inject_tag: json:"status"
	Status MarketStatus `protobuf:"varint,14,opt,name=Status,proto3,enum=chipmunkApi.MarketStatus" json:"status"`
	// @inject_tag: json:"brokerage_name"
	BrokerageName string `protobuf:"bytes,15,opt,name=BrokerageName,proto3" json:"brokerage_name"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{0}
}

func (x *Market) GetPricingDecimal() float64 {
	if x != nil {
		return x.PricingDecimal
	}
	return 0
}

func (x *Market) GetTradingDecimal() float64 {
	if x != nil {
		return x.TradingDecimal
	}
	return 0
}

func (x *Market) GetTakerFeeRate() float64 {
	if x != nil {
		return x.TakerFeeRate
	}
	return 0
}

func (x *Market) GetMakerFeeRate() float64 {
	if x != nil {
		return x.MakerFeeRate
	}
	return 0
}

func (x *Market) GetDestination() *Asset {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Market) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Market) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *Market) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Market) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Market) GetSource() *Asset {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Market) GetIsAMM() bool {
	if x != nil {
		return x.IsAMM
	}
	return false
}

func (x *Market) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Market) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Market) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return Market_Disable
}

func (x *Market) GetBrokerageName() string {
	if x != nil {
		return x.BrokerageName
	}
	return ""
}

type Markets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"elements"
	Elements []*Market `protobuf:"bytes,1,rep,name=Elements,proto3" json:"elements"`
}

func (x *Markets) Reset() {
	*x = Markets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Markets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Markets) ProtoMessage() {}

func (x *Markets) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Markets.ProtoReflect.Descriptor instead.
func (*Markets) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{1}
}

func (x *Markets) GetElements() []*Market {
	if x != nil {
		return x.Elements
	}
	return nil
}

type ReturnMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`
}

func (x *ReturnMarketRequest) Reset() {
	*x = ReturnMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMarketRequest) ProtoMessage() {}

func (x *ReturnMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMarketRequest.ProtoReflect.Descriptor instead.
func (*ReturnMarketRequest) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{2}
}

func (x *ReturnMarketRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type MarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"brokerage_id"
	BrokerageID string `protobuf:"bytes,1,opt,name=BrokerageID,proto3" json:"brokerage_id"`
	// @inject_tag: json:"market_name"
	MarketName string `protobuf:"bytes,2,opt,name=MarketName,proto3" json:"market_name"`
}

func (x *MarketRequest) Reset() {
	*x = MarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketRequest) ProtoMessage() {}

func (x *MarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketRequest.ProtoReflect.Descriptor instead.
func (*MarketRequest) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{3}
}

func (x *MarketRequest) GetBrokerageID() string {
	if x != nil {
		return x.BrokerageID
	}
	return ""
}

func (x *MarketRequest) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

type MarketListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"brokerage_id"
	BrokerageID string `protobuf:"bytes,1,opt,name=BrokerageID,proto3" json:"brokerage_id"`
}

func (x *MarketListRequest) Reset() {
	*x = MarketListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListRequest) ProtoMessage() {}

func (x *MarketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListRequest.ProtoReflect.Descriptor instead.
func (*MarketListRequest) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{4}
}

func (x *MarketListRequest) GetBrokerageID() string {
	if x != nil {
		return x.BrokerageID
	}
	return ""
}

type MarketListBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"brokerage_id"
	BrokerageID string `protobuf:"bytes,1,opt,name=BrokerageID,proto3" json:"brokerage_id"`
	// @inject_tag: json:"source"
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"source"`
}

func (x *MarketListBySourceRequest) Reset() {
	*x = MarketListBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListBySourceRequest) ProtoMessage() {}

func (x *MarketListBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListBySourceRequest.ProtoReflect.Descriptor instead.
func (*MarketListBySourceRequest) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{5}
}

func (x *MarketListBySourceRequest) GetBrokerageID() string {
	if x != nil {
		return x.BrokerageID
	}
	return ""
}

func (x *MarketListBySourceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type UpdateMarketsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"brokerage_name"
	BrokerageName string `protobuf:"bytes,1,opt,name=BrokerageName,proto3" json:"brokerage_name"`
}

func (x *UpdateMarketsReq) Reset() {
	*x = UpdateMarketsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_src_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketsReq) ProtoMessage() {}

func (x *UpdateMarketsReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_src_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketsReq.ProtoReflect.Descriptor instead.
func (*UpdateMarketsReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_src_market_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMarketsReq) GetBrokerageName() string {
	if x != nil {
		return x.BrokerageName
	}
	return ""
}

var File_services_chipmunk_api_src_market_proto protoreflect.FileDescriptor

var file_services_chipmunk_api_src_market_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x6d,
	0x75, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75,
	0x6e, 0x6b, 0x41, 0x70, 0x69, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d,
	0x69, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb1, 0x04, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d,
	0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x73, 0x41, 0x4d, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73,
	0x41, 0x4d, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75,
	0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x21, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x22, 0x55, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x82, 0x03, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x68,
	0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x1a, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x20, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e,
	0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x70,
	0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e,
	0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e,
	0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e,
	0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x69, 0x70,
	0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x2d, 0x76, 0x61, 0x72, 0x6d, 0x61, 0x7a, 0x79, 0x61,
	0x72, 0x2f, 0x47, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_chipmunk_api_src_market_proto_rawDescOnce sync.Once
	file_services_chipmunk_api_src_market_proto_rawDescData = file_services_chipmunk_api_src_market_proto_rawDesc
)

func file_services_chipmunk_api_src_market_proto_rawDescGZIP() []byte {
	file_services_chipmunk_api_src_market_proto_rawDescOnce.Do(func() {
		file_services_chipmunk_api_src_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_chipmunk_api_src_market_proto_rawDescData)
	})
	return file_services_chipmunk_api_src_market_proto_rawDescData
}

var file_services_chipmunk_api_src_market_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_chipmunk_api_src_market_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_services_chipmunk_api_src_market_proto_goTypes = []interface{}{
	(MarketStatus)(0),                 // 0: chipmunkApi.Market.status
	(*Market)(nil),                    // 1: chipmunkApi.Market
	(*Markets)(nil),                   // 2: chipmunkApi.Markets
	(*ReturnMarketRequest)(nil),       // 3: chipmunkApi.ReturnMarketRequest
	(*MarketRequest)(nil),             // 4: chipmunkApi.MarketRequest
	(*MarketListRequest)(nil),         // 5: chipmunkApi.MarketListRequest
	(*MarketListBySourceRequest)(nil), // 6: chipmunkApi.MarketListBySourceRequest
	(*UpdateMarketsReq)(nil),          // 7: chipmunkApi.UpdateMarketsReq
	(*Asset)(nil),                     // 8: chipmunkApi.Asset
	(*api.Void)(nil),                  // 9: api.Void
}
var file_services_chipmunk_api_src_market_proto_depIdxs = []int32{
	8,  // 0: chipmunkApi.Market.Destination:type_name -> chipmunkApi.Asset
	8,  // 1: chipmunkApi.Market.Source:type_name -> chipmunkApi.Asset
	0,  // 2: chipmunkApi.Market.Status:type_name -> chipmunkApi.Market.status
	1,  // 3: chipmunkApi.Markets.Elements:type_name -> chipmunkApi.Market
	1,  // 4: chipmunkApi.MarketService.Set:input_type -> chipmunkApi.Market
	3,  // 5: chipmunkApi.MarketService.Return:input_type -> chipmunkApi.ReturnMarketRequest
	4,  // 6: chipmunkApi.MarketService.Get:input_type -> chipmunkApi.MarketRequest
	5,  // 7: chipmunkApi.MarketService.List:input_type -> chipmunkApi.MarketListRequest
	7,  // 8: chipmunkApi.MarketService.UpdateMarkets:input_type -> chipmunkApi.UpdateMarketsReq
	6,  // 9: chipmunkApi.MarketService.ReturnBySource:input_type -> chipmunkApi.MarketListBySourceRequest
	1,  // 10: chipmunkApi.MarketService.Set:output_type -> chipmunkApi.Market
	1,  // 11: chipmunkApi.MarketService.Return:output_type -> chipmunkApi.Market
	1,  // 12: chipmunkApi.MarketService.Get:output_type -> chipmunkApi.Market
	2,  // 13: chipmunkApi.MarketService.List:output_type -> chipmunkApi.Markets
	9,  // 14: chipmunkApi.MarketService.UpdateMarkets:output_type -> api.Void
	2,  // 15: chipmunkApi.MarketService.ReturnBySource:output_type -> chipmunkApi.Markets
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_services_chipmunk_api_src_market_proto_init() }
func file_services_chipmunk_api_src_market_proto_init() {
	if File_services_chipmunk_api_src_market_proto != nil {
		return
	}
	file_services_chipmunk_api_src_asset_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_chipmunk_api_src_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_src_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Markets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_src_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_src_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_src_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_src_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_src_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_chipmunk_api_src_market_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_chipmunk_api_src_market_proto_goTypes,
		DependencyIndexes: file_services_chipmunk_api_src_market_proto_depIdxs,
		EnumInfos:         file_services_chipmunk_api_src_market_proto_enumTypes,
		MessageInfos:      file_services_chipmunk_api_src_market_proto_msgTypes,
	}.Build()
	File_services_chipmunk_api_src_market_proto = out.File
	file_services_chipmunk_api_src_market_proto_rawDesc = nil
	file_services_chipmunk_api_src_market_proto_goTypes = nil
	file_services_chipmunk_api_src_market_proto_depIdxs = nil
}
