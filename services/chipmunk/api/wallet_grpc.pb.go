// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	api "github.com/h-varmazyar/Gate/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletsServiceClient is the client API for WalletsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletsServiceClient interface {
	List(ctx context.Context, in *WalletListRequest, opts ...grpc.CallOption) (*Wallets, error)
	StartWorker(ctx context.Context, in *StartWorkerRequest, opts ...grpc.CallOption) (*api.Void, error)
	CancelWorker(ctx context.Context, in *api.Void, opts ...grpc.CallOption) (*api.Void, error)
	ReturnByAsset(ctx context.Context, in *ReturnByAssetReq, opts ...grpc.CallOption) (*Wallet, error)
}

type walletsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletsServiceClient(cc grpc.ClientConnInterface) WalletsServiceClient {
	return &walletsServiceClient{cc}
}

func (c *walletsServiceClient) List(ctx context.Context, in *WalletListRequest, opts ...grpc.CallOption) (*Wallets, error) {
	out := new(Wallets)
	err := c.cc.Invoke(ctx, "/chipmunkApi.WalletsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) StartWorker(ctx context.Context, in *StartWorkerRequest, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/chipmunkApi.WalletsService/StartWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) CancelWorker(ctx context.Context, in *api.Void, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/chipmunkApi.WalletsService/CancelWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) ReturnByAsset(ctx context.Context, in *ReturnByAssetReq, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/chipmunkApi.WalletsService/ReturnByAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletsServiceServer is the server API for WalletsService service.
// All implementations should embed UnimplementedWalletsServiceServer
// for forward compatibility
type WalletsServiceServer interface {
	List(context.Context, *WalletListRequest) (*Wallets, error)
	StartWorker(context.Context, *StartWorkerRequest) (*api.Void, error)
	CancelWorker(context.Context, *api.Void) (*api.Void, error)
	ReturnByAsset(context.Context, *ReturnByAssetReq) (*Wallet, error)
}

// UnimplementedWalletsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWalletsServiceServer struct {
}

func (UnimplementedWalletsServiceServer) List(context.Context, *WalletListRequest) (*Wallets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWalletsServiceServer) StartWorker(context.Context, *StartWorkerRequest) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorker not implemented")
}
func (UnimplementedWalletsServiceServer) CancelWorker(context.Context, *api.Void) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorker not implemented")
}
func (UnimplementedWalletsServiceServer) ReturnByAsset(context.Context, *ReturnByAssetReq) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnByAsset not implemented")
}

// UnsafeWalletsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletsServiceServer will
// result in compilation errors.
type UnsafeWalletsServiceServer interface {
	mustEmbedUnimplementedWalletsServiceServer()
}

func RegisterWalletsServiceServer(s grpc.ServiceRegistrar, srv WalletsServiceServer) {
	s.RegisterService(&WalletsService_ServiceDesc, srv)
}

func _WalletsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.WalletsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).List(ctx, req.(*WalletListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_StartWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).StartWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.WalletsService/StartWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).StartWorker(ctx, req.(*StartWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_CancelWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).CancelWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.WalletsService/CancelWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).CancelWorker(ctx, req.(*api.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_ReturnByAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnByAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).ReturnByAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.WalletsService/ReturnByAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).ReturnByAsset(ctx, req.(*ReturnByAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletsService_ServiceDesc is the grpc.ServiceDesc for WalletsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chipmunkApi.WalletsService",
	HandlerType: (*WalletsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _WalletsService_List_Handler,
		},
		{
			MethodName: "StartWorker",
			Handler:    _WalletsService_StartWorker_Handler,
		},
		{
			MethodName: "CancelWorker",
			Handler:    _WalletsService_CancelWorker_Handler,
		},
		{
			MethodName: "ReturnByAsset",
			Handler:    _WalletsService_ReturnByAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/chipmunk/api/src/wallet.proto",
}
