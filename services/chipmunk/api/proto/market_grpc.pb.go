// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services/chipmunk/api/proto/src/market.proto

package proto

import (
	context "context"
	proto "github.com/h-varmazyar/Gate/api/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketServiceClient interface {
	Create(ctx context.Context, in *CreateMarketReq, opts ...grpc.CallOption) (*Market, error)
	Return(ctx context.Context, in *MarketReturnReq, opts ...grpc.CallOption) (*Market, error)
	Update(ctx context.Context, in *Market, opts ...grpc.CallOption) (*Market, error)
	UpdateFromPlatform(ctx context.Context, in *MarketUpdateFromPlatformReq, opts ...grpc.CallOption) (*Markets, error)
	List(ctx context.Context, in *MarketListReq, opts ...grpc.CallOption) (*Markets, error)
	ListBySource(ctx context.Context, in *MarketListBySourceReq, opts ...grpc.CallOption) (*Markets, error)
	StartWorker(ctx context.Context, in *WorkerStartReq, opts ...grpc.CallOption) (*proto.Void, error)
	StopWorker(ctx context.Context, in *WorkerStopReq, opts ...grpc.CallOption) (*proto.Void, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) Create(ctx context.Context, in *CreateMarketReq, opts ...grpc.CallOption) (*Market, error) {
	out := new(Market)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) Return(ctx context.Context, in *MarketReturnReq, opts ...grpc.CallOption) (*Market, error) {
	out := new(Market)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/Return", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) Update(ctx context.Context, in *Market, opts ...grpc.CallOption) (*Market, error) {
	out := new(Market)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) UpdateFromPlatform(ctx context.Context, in *MarketUpdateFromPlatformReq, opts ...grpc.CallOption) (*Markets, error) {
	out := new(Markets)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/UpdateFromPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) List(ctx context.Context, in *MarketListReq, opts ...grpc.CallOption) (*Markets, error) {
	out := new(Markets)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) ListBySource(ctx context.Context, in *MarketListBySourceReq, opts ...grpc.CallOption) (*Markets, error) {
	out := new(Markets)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/ListBySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) StartWorker(ctx context.Context, in *WorkerStartReq, opts ...grpc.CallOption) (*proto.Void, error) {
	out := new(proto.Void)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/StartWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) StopWorker(ctx context.Context, in *WorkerStopReq, opts ...grpc.CallOption) (*proto.Void, error) {
	out := new(proto.Void)
	err := c.cc.Invoke(ctx, "/chipmunkApi.MarketService/StopWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServiceServer is the server API for MarketService service.
// All implementations should embed UnimplementedMarketServiceServer
// for forward compatibility
type MarketServiceServer interface {
	Create(context.Context, *CreateMarketReq) (*Market, error)
	Return(context.Context, *MarketReturnReq) (*Market, error)
	Update(context.Context, *Market) (*Market, error)
	UpdateFromPlatform(context.Context, *MarketUpdateFromPlatformReq) (*Markets, error)
	List(context.Context, *MarketListReq) (*Markets, error)
	ListBySource(context.Context, *MarketListBySourceReq) (*Markets, error)
	StartWorker(context.Context, *WorkerStartReq) (*proto.Void, error)
	StopWorker(context.Context, *WorkerStopReq) (*proto.Void, error)
}

// UnimplementedMarketServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMarketServiceServer struct {
}

func (UnimplementedMarketServiceServer) Create(context.Context, *CreateMarketReq) (*Market, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMarketServiceServer) Return(context.Context, *MarketReturnReq) (*Market, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Return not implemented")
}
func (UnimplementedMarketServiceServer) Update(context.Context, *Market) (*Market, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMarketServiceServer) UpdateFromPlatform(context.Context, *MarketUpdateFromPlatformReq) (*Markets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromPlatform not implemented")
}
func (UnimplementedMarketServiceServer) List(context.Context, *MarketListReq) (*Markets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMarketServiceServer) ListBySource(context.Context, *MarketListBySourceReq) (*Markets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySource not implemented")
}
func (UnimplementedMarketServiceServer) StartWorker(context.Context, *WorkerStartReq) (*proto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorker not implemented")
}
func (UnimplementedMarketServiceServer) StopWorker(context.Context, *WorkerStopReq) (*proto.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorker not implemented")
}

// UnsafeMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServiceServer will
// result in compilation errors.
type UnsafeMarketServiceServer interface {
	mustEmbedUnimplementedMarketServiceServer()
}

func RegisterMarketServiceServer(s grpc.ServiceRegistrar, srv MarketServiceServer) {
	s.RegisterService(&MarketService_ServiceDesc, srv)
}

func _MarketService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMarketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).Create(ctx, req.(*CreateMarketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_Return_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).Return(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/Return",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).Return(ctx, req.(*MarketReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Market)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).Update(ctx, req.(*Market))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_UpdateFromPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketUpdateFromPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).UpdateFromPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/UpdateFromPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).UpdateFromPlatform(ctx, req.(*MarketUpdateFromPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).List(ctx, req.(*MarketListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_ListBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketListBySourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).ListBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/ListBySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).ListBySource(ctx, req.(*MarketListBySourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_StartWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).StartWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/StartWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).StartWorker(ctx, req.(*WorkerStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_StopWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).StopWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chipmunkApi.MarketService/StopWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).StopWorker(ctx, req.(*WorkerStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketService_ServiceDesc is the grpc.ServiceDesc for MarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chipmunkApi.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MarketService_Create_Handler,
		},
		{
			MethodName: "Return",
			Handler:    _MarketService_Return_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MarketService_Update_Handler,
		},
		{
			MethodName: "UpdateFromPlatform",
			Handler:    _MarketService_UpdateFromPlatform_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MarketService_List_Handler,
		},
		{
			MethodName: "ListBySource",
			Handler:    _MarketService_ListBySource_Handler,
		},
		{
			MethodName: "StartWorker",
			Handler:    _MarketService_StartWorker_Handler,
		},
		{
			MethodName: "StopWorker",
			Handler:    _MarketService_StopWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/chipmunk/api/proto/src/market.proto",
}
