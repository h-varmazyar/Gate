// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: services/chipmunk/api/proto/src/market.proto

package proto

import (
	proto "github.com/h-varmazyar/Gate/api/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"pricing_decimal"
	PricingDecimal float64 `protobuf:"fixed64,1,opt,name=PricingDecimal,proto3" json:"pricing_decimal"`
	//	@inject_tag:	json:"trading_decimal"
	TradingDecimal float64 `protobuf:"fixed64,2,opt,name=TradingDecimal,proto3" json:"trading_decimal"`
	//	@inject_tag:	json:"taker_fee_rate"
	TakerFeeRate float64 `protobuf:"fixed64,3,opt,name=TakerFeeRate,proto3" json:"taker_fee_rate"`
	//	@inject_tag:	json:"maker_fee_rate"
	MakerFeeRate float64 `protobuf:"fixed64,4,opt,name=MakerFeeRate,proto3" json:"maker_fee_rate"`
	//	@inject_tag:	json:"destination"
	Destination *Asset `protobuf:"bytes,5,opt,name=Destination,proto3" json:"destination"`
	//	@inject_tag:	json:"issue_date"
	IssueDate int64 `protobuf:"varint,6,opt,name=IssueDate,proto3" json:"issue_date"`
	//	@inject_tag:	json:"min_amount"
	MinAmount float64 `protobuf:"fixed64,7,opt,name=MinAmount,proto3" json:"min_amount"`
	//	@inject_tag:	json:"created_at"
	CreatedAt int64 `protobuf:"varint,8,opt,name=CreatedAt,proto3" json:"created_at"`
	//	@inject_tag:	json:"updated_at"
	UpdatedAt int64 `protobuf:"varint,9,opt,name=UpdatedAt,proto3" json:"updated_at"`
	//	@inject_tag:	json:"source"
	Source *Asset `protobuf:"bytes,10,opt,name=Source,proto3" json:"source"`
	//	@inject_tag:	json:"is_amm"
	IsAMM bool `protobuf:"varint,11,opt,name=IsAMM,proto3" json:"is_amm"`
	//	@inject_tag:	json:"name"
	Name string `protobuf:"bytes,12,opt,name=Name,proto3" json:"name"`
	//	@inject_tag:	json:"id"
	ID string `protobuf:"bytes,13,opt,name=ID,proto3" json:"id"`
	//	@inject_tag:	json:"status"
	Status proto.Status `protobuf:"varint,14,opt,name=Status,proto3,enum=api.Status" json:"status"`
	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,15,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{0}
}

func (x *Market) GetPricingDecimal() float64 {
	if x != nil {
		return x.PricingDecimal
	}
	return 0
}

func (x *Market) GetTradingDecimal() float64 {
	if x != nil {
		return x.TradingDecimal
	}
	return 0
}

func (x *Market) GetTakerFeeRate() float64 {
	if x != nil {
		return x.TakerFeeRate
	}
	return 0
}

func (x *Market) GetMakerFeeRate() float64 {
	if x != nil {
		return x.MakerFeeRate
	}
	return 0
}

func (x *Market) GetDestination() *Asset {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Market) GetIssueDate() int64 {
	if x != nil {
		return x.IssueDate
	}
	return 0
}

func (x *Market) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *Market) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Market) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Market) GetSource() *Asset {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Market) GetIsAMM() bool {
	if x != nil {
		return x.IsAMM
	}
	return false
}

func (x *Market) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Market) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Market) GetStatus() proto.Status {
	if x != nil {
		return x.Status
	}
	return proto.Status(0)
}

func (x *Market) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

type MarketCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"pricing_decimal"
	PricingDecimal float64 `protobuf:"fixed64,1,opt,name=PricingDecimal,proto3" json:"pricing_decimal"`
	//	@inject_tag:	json:"trading_decimal"
	TradingDecimal float64 `protobuf:"fixed64,2,opt,name=TradingDecimal,proto3" json:"trading_decimal"`
	//	@inject_tag:	json:"taker_fee_rate"
	TakerFeeRate float64 `protobuf:"fixed64,3,opt,name=TakerFeeRate,proto3" json:"taker_fee_rate"`
	//	@inject_tag:	json:"maker_fee_rate"
	MakerFeeRate float64 `protobuf:"fixed64,4,opt,name=MakerFeeRate,proto3" json:"maker_fee_rate"`
	//	@inject_tag:	json:"destination_symbol"
	DestinationSymbol string `protobuf:"bytes,5,opt,name=DestinationSymbol,proto3" json:"destination_symbol"`
	//	@inject_tag:	json:"issue_date"
	IssueDate int64 `protobuf:"varint,6,opt,name=IssueDate,proto3" json:"issue_date"`
	//	@inject_tag:	json:"min_amount"
	MinAmount float64 `protobuf:"fixed64,7,opt,name=MinAmount,proto3" json:"min_amount"`
	//	@inject_tag:	json:"source_symbol"
	SourceSymbol string `protobuf:"bytes,8,opt,name=SourceSymbol,proto3" json:"source_symbol"`
	//	@inject_tag:	json:"is_amm"
	IsAMM bool `protobuf:"varint,9,opt,name=IsAMM,proto3" json:"is_amm"`
	//	@inject_tag:	json:"name"
	Name string `protobuf:"bytes,10,opt,name=Name,proto3" json:"name"`
	//	@inject_tag:	json:"status"
	Status proto.Status `protobuf:"varint,11,opt,name=Status,proto3,enum=api.Status" json:"status"`
	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,12,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *MarketCreateReq) Reset() {
	*x = MarketCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketCreateReq) ProtoMessage() {}

func (x *MarketCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketCreateReq.ProtoReflect.Descriptor instead.
func (*MarketCreateReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{1}
}

func (x *MarketCreateReq) GetPricingDecimal() float64 {
	if x != nil {
		return x.PricingDecimal
	}
	return 0
}

func (x *MarketCreateReq) GetTradingDecimal() float64 {
	if x != nil {
		return x.TradingDecimal
	}
	return 0
}

func (x *MarketCreateReq) GetTakerFeeRate() float64 {
	if x != nil {
		return x.TakerFeeRate
	}
	return 0
}

func (x *MarketCreateReq) GetMakerFeeRate() float64 {
	if x != nil {
		return x.MakerFeeRate
	}
	return 0
}

func (x *MarketCreateReq) GetDestinationSymbol() string {
	if x != nil {
		return x.DestinationSymbol
	}
	return ""
}

func (x *MarketCreateReq) GetIssueDate() int64 {
	if x != nil {
		return x.IssueDate
	}
	return 0
}

func (x *MarketCreateReq) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *MarketCreateReq) GetSourceSymbol() string {
	if x != nil {
		return x.SourceSymbol
	}
	return ""
}

func (x *MarketCreateReq) GetIsAMM() bool {
	if x != nil {
		return x.IsAMM
	}
	return false
}

func (x *MarketCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketCreateReq) GetStatus() proto.Status {
	if x != nil {
		return x.Status
	}
	return proto.Status(0)
}

func (x *MarketCreateReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

type Markets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"elements"
	Elements []*Market `protobuf:"bytes,1,rep,name=Elements,proto3" json:"elements"`
}

func (x *Markets) Reset() {
	*x = Markets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Markets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Markets) ProtoMessage() {}

func (x *Markets) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Markets.ProtoReflect.Descriptor instead.
func (*Markets) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{2}
}

func (x *Markets) GetElements() []*Market {
	if x != nil {
		return x.Elements
	}
	return nil
}

type MarketReturnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"id"
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`
}

func (x *MarketReturnReq) Reset() {
	*x = MarketReturnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketReturnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketReturnReq) ProtoMessage() {}

func (x *MarketReturnReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketReturnReq.ProtoReflect.Descriptor instead.
func (*MarketReturnReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{3}
}

func (x *MarketReturnReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type MarketListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,1,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *MarketListReq) Reset() {
	*x = MarketListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListReq) ProtoMessage() {}

func (x *MarketListReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListReq.ProtoReflect.Descriptor instead.
func (*MarketListReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{4}
}

func (x *MarketListReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

type MarketUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"id"
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`
	//	@inject_tag:	json:"pricing_decimal"
	PricingDecimal float64 `protobuf:"fixed64,2,opt,name=PricingDecimal,proto3" json:"pricing_decimal"`
	//	@inject_tag:	json:"trading_decimal"
	TradingDecimal float64 `protobuf:"fixed64,3,opt,name=TradingDecimal,proto3" json:"trading_decimal"`
	//	@inject_tag:	json:"taker_fee_rate"
	TakerFeeRate float64 `protobuf:"fixed64,4,opt,name=TakerFeeRate,proto3" json:"taker_fee_rate"`
	//	@inject_tag:	json:"maker_fee_rate"
	MakerFeeRate float64 `protobuf:"fixed64,5,opt,name=MakerFeeRate,proto3" json:"maker_fee_rate"`
	//	@inject_tag:	json:"destination_symbol"
	DestinationSymbol string `protobuf:"bytes,6,opt,name=DestinationSymbol,proto3" json:"destination_symbol"`
	//	@inject_tag:	json:"issue_date"
	IssueDate int64 `protobuf:"varint,7,opt,name=IssueDate,proto3" json:"issue_date"`
	//	@inject_tag:	json:"min_amount"
	MinAmount float64 `protobuf:"fixed64,8,opt,name=MinAmount,proto3" json:"min_amount"`
	//	@inject_tag:	json:"source_symbol"
	SourceSymbol string `protobuf:"bytes,9,opt,name=SourceSymbol,proto3" json:"source_symbol"`
	//	@inject_tag:	json:"is_amm"
	IsAMM bool `protobuf:"varint,10,opt,name=IsAMM,proto3" json:"is_amm"`
	//	@inject_tag:	json:"name"
	Name string `protobuf:"bytes,11,opt,name=Name,proto3" json:"name"`
	//	@inject_tag:	json:"status"
	Status proto.Status `protobuf:"varint,12,opt,name=Status,proto3,enum=api.Status" json:"status"`
	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,13,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *MarketUpdateReq) Reset() {
	*x = MarketUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketUpdateReq) ProtoMessage() {}

func (x *MarketUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketUpdateReq.ProtoReflect.Descriptor instead.
func (*MarketUpdateReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{5}
}

func (x *MarketUpdateReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MarketUpdateReq) GetPricingDecimal() float64 {
	if x != nil {
		return x.PricingDecimal
	}
	return 0
}

func (x *MarketUpdateReq) GetTradingDecimal() float64 {
	if x != nil {
		return x.TradingDecimal
	}
	return 0
}

func (x *MarketUpdateReq) GetTakerFeeRate() float64 {
	if x != nil {
		return x.TakerFeeRate
	}
	return 0
}

func (x *MarketUpdateReq) GetMakerFeeRate() float64 {
	if x != nil {
		return x.MakerFeeRate
	}
	return 0
}

func (x *MarketUpdateReq) GetDestinationSymbol() string {
	if x != nil {
		return x.DestinationSymbol
	}
	return ""
}

func (x *MarketUpdateReq) GetIssueDate() int64 {
	if x != nil {
		return x.IssueDate
	}
	return 0
}

func (x *MarketUpdateReq) GetMinAmount() float64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *MarketUpdateReq) GetSourceSymbol() string {
	if x != nil {
		return x.SourceSymbol
	}
	return ""
}

func (x *MarketUpdateReq) GetIsAMM() bool {
	if x != nil {
		return x.IsAMM
	}
	return false
}

func (x *MarketUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketUpdateReq) GetStatus() proto.Status {
	if x != nil {
		return x.Status
	}
	return proto.Status(0)
}

func (x *MarketUpdateReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

type MarketUpdateFromPlatformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,1,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *MarketUpdateFromPlatformReq) Reset() {
	*x = MarketUpdateFromPlatformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketUpdateFromPlatformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketUpdateFromPlatformReq) ProtoMessage() {}

func (x *MarketUpdateFromPlatformReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketUpdateFromPlatformReq.ProtoReflect.Descriptor instead.
func (*MarketUpdateFromPlatformReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{6}
}

func (x *MarketUpdateFromPlatformReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

type MarketListBySourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,1,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
	//	@inject_tag:	json:"source"
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"source"`
}

func (x *MarketListBySourceReq) Reset() {
	*x = MarketListBySourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListBySourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListBySourceReq) ProtoMessage() {}

func (x *MarketListBySourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListBySourceReq.ProtoReflect.Descriptor instead.
func (*MarketListBySourceReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{7}
}

func (x *MarketListBySourceReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

func (x *MarketListBySourceReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type WorkerStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,1,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *WorkerStartReq) Reset() {
	*x = WorkerStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStartReq) ProtoMessage() {}

func (x *WorkerStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStartReq.ProtoReflect.Descriptor instead.
func (*WorkerStartReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerStartReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

type WorkerStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	@inject_tag:	json:"platform"
	Platform proto.Platform `protobuf:"varint,1,opt,name=Platform,proto3,enum=api.Platform" json:"platform"`
}

func (x *WorkerStopReq) Reset() {
	*x = WorkerStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStopReq) ProtoMessage() {}

func (x *WorkerStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_chipmunk_api_proto_src_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStopReq.ProtoReflect.Descriptor instead.
func (*WorkerStopReq) Descriptor() ([]byte, []int) {
	return file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP(), []int{9}
}

func (x *WorkerStopReq) GetPlatform() proto.Platform {
	if x != nil {
		return x.Platform
	}
	return proto.Platform(0)
}

var File_services_chipmunk_api_proto_src_market_proto protoreflect.FileDescriptor

var file_services_chipmunk_api_proto_src_market_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x6d,
	0x75, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x1a, 0x18, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x69,
	0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x73, 0x41, 0x4d, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x49, 0x73, 0x41, 0x4d, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb1, 0x03, 0x0a, 0x0f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x41, 0x4d, 0x4d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x41, 0x4d, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x3a, 0x0a,
	0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x69,
	0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x0d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xc1, 0x03, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x41, 0x4d, 0x4d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x49, 0x73, 0x41, 0x4d, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x48, 0x0a, 0x1b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5a, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22,
	0x3a, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x29, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x32, 0xa0, 0x03, 0x0a, 0x0d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75,
	0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b,
	0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x69,
	0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x69, 0x70, 0x6d,
	0x75, 0x6e, 0x6b, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x39,
	0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x2d, 0x76,
	0x61, 0x72, 0x6d, 0x61, 0x7a, 0x79, 0x61, 0x72, 0x2f, 0x47, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x6d, 0x75, 0x6e, 0x6b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_services_chipmunk_api_proto_src_market_proto_rawDescOnce sync.Once
	file_services_chipmunk_api_proto_src_market_proto_rawDescData = file_services_chipmunk_api_proto_src_market_proto_rawDesc
)

func file_services_chipmunk_api_proto_src_market_proto_rawDescGZIP() []byte {
	file_services_chipmunk_api_proto_src_market_proto_rawDescOnce.Do(func() {
		file_services_chipmunk_api_proto_src_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_chipmunk_api_proto_src_market_proto_rawDescData)
	})
	return file_services_chipmunk_api_proto_src_market_proto_rawDescData
}

var file_services_chipmunk_api_proto_src_market_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_services_chipmunk_api_proto_src_market_proto_goTypes = []interface{}{
	(*Market)(nil),                      // 0: chipmunkApi.Market
	(*MarketCreateReq)(nil),             // 1: chipmunkApi.MarketCreateReq
	(*Markets)(nil),                     // 2: chipmunkApi.Markets
	(*MarketReturnReq)(nil),             // 3: chipmunkApi.MarketReturnReq
	(*MarketListReq)(nil),               // 4: chipmunkApi.MarketListReq
	(*MarketUpdateReq)(nil),             // 5: chipmunkApi.MarketUpdateReq
	(*MarketUpdateFromPlatformReq)(nil), // 6: chipmunkApi.MarketUpdateFromPlatformReq
	(*MarketListBySourceReq)(nil),       // 7: chipmunkApi.MarketListBySourceReq
	(*WorkerStartReq)(nil),              // 8: chipmunkApi.WorkerStartReq
	(*WorkerStopReq)(nil),               // 9: chipmunkApi.WorkerStopReq
	(*Asset)(nil),                       // 10: chipmunkApi.Asset
	(proto.Status)(0),                   // 11: api.Status
	(proto.Platform)(0),                 // 12: api.Platform
}
var file_services_chipmunk_api_proto_src_market_proto_depIdxs = []int32{
	10, // 0: chipmunkApi.Market.Destination:type_name -> chipmunkApi.Asset
	10, // 1: chipmunkApi.Market.Source:type_name -> chipmunkApi.Asset
	11, // 2: chipmunkApi.Market.Status:type_name -> api.Status
	12, // 3: chipmunkApi.Market.Platform:type_name -> api.Platform
	11, // 4: chipmunkApi.MarketCreateReq.Status:type_name -> api.Status
	12, // 5: chipmunkApi.MarketCreateReq.Platform:type_name -> api.Platform
	0,  // 6: chipmunkApi.Markets.Elements:type_name -> chipmunkApi.Market
	12, // 7: chipmunkApi.MarketListReq.Platform:type_name -> api.Platform
	11, // 8: chipmunkApi.MarketUpdateReq.Status:type_name -> api.Status
	12, // 9: chipmunkApi.MarketUpdateReq.Platform:type_name -> api.Platform
	12, // 10: chipmunkApi.MarketUpdateFromPlatformReq.Platform:type_name -> api.Platform
	12, // 11: chipmunkApi.MarketListBySourceReq.Platform:type_name -> api.Platform
	12, // 12: chipmunkApi.WorkerStartReq.Platform:type_name -> api.Platform
	12, // 13: chipmunkApi.WorkerStopReq.Platform:type_name -> api.Platform
	1,  // 14: chipmunkApi.MarketService.Create:input_type -> chipmunkApi.MarketCreateReq
	3,  // 15: chipmunkApi.MarketService.Return:input_type -> chipmunkApi.MarketReturnReq
	5,  // 16: chipmunkApi.MarketService.Update:input_type -> chipmunkApi.MarketUpdateReq
	6,  // 17: chipmunkApi.MarketService.UpdateFromPlatform:input_type -> chipmunkApi.MarketUpdateFromPlatformReq
	4,  // 18: chipmunkApi.MarketService.List:input_type -> chipmunkApi.MarketListReq
	7,  // 19: chipmunkApi.MarketService.ListBySource:input_type -> chipmunkApi.MarketListBySourceReq
	0,  // 20: chipmunkApi.MarketService.Create:output_type -> chipmunkApi.Market
	0,  // 21: chipmunkApi.MarketService.Return:output_type -> chipmunkApi.Market
	0,  // 22: chipmunkApi.MarketService.Update:output_type -> chipmunkApi.Market
	2,  // 23: chipmunkApi.MarketService.UpdateFromPlatform:output_type -> chipmunkApi.Markets
	2,  // 24: chipmunkApi.MarketService.List:output_type -> chipmunkApi.Markets
	2,  // 25: chipmunkApi.MarketService.ListBySource:output_type -> chipmunkApi.Markets
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_services_chipmunk_api_proto_src_market_proto_init() }
func file_services_chipmunk_api_proto_src_market_proto_init() {
	if File_services_chipmunk_api_proto_src_market_proto != nil {
		return
	}
	file_services_chipmunk_api_proto_src_asset_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Markets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketReturnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketUpdateFromPlatformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListBySourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_chipmunk_api_proto_src_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_chipmunk_api_proto_src_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_chipmunk_api_proto_src_market_proto_goTypes,
		DependencyIndexes: file_services_chipmunk_api_proto_src_market_proto_depIdxs,
		MessageInfos:      file_services_chipmunk_api_proto_src_market_proto_msgTypes,
	}.Build()
	File_services_chipmunk_api_proto_src_market_proto = out.File
	file_services_chipmunk_api_proto_src_market_proto_rawDesc = nil
	file_services_chipmunk_api_proto_src_market_proto_goTypes = nil
	file_services_chipmunk_api_proto_src_market_proto_depIdxs = nil
}
