// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services/core/api/proto/src/functions.proto

package proto

import (
	context "context"
	api1 "github.com/h-varmazyar/Gate/api"
	api "github.com/h-varmazyar/Gate/services/chipmunk/api"
	api2 "github.com/h-varmazyar/Gate/services/eagle/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionsServiceClient is the client API for FunctionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionsServiceClient interface {
	OHLC(ctx context.Context, in *OHLCReq, opts ...grpc.CallOption) (*api.Candles, error)
	WalletsBalance(ctx context.Context, in *api1.Void, opts ...grpc.CallOption) (*api.Wallets, error)
	MarketStatistics(ctx context.Context, in *MarketStatisticsReq, opts ...grpc.CallOption) (*MarketStatisticsResp, error)
	MarketList(ctx context.Context, in *MarketListReq, opts ...grpc.CallOption) (*api.Markets, error)
	NewOrder(ctx context.Context, in *NewOrderReq, opts ...grpc.CallOption) (*api2.Order, error)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*api2.Order, error)
	OrderStatus(ctx context.Context, in *OrderStatusReq, opts ...grpc.CallOption) (*api2.Order, error)
	AsyncOHLC(ctx context.Context, in *OHLCReq, opts ...grpc.CallOption) (*api1.Void, error)
}

type functionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionsServiceClient(cc grpc.ClientConnInterface) FunctionsServiceClient {
	return &functionsServiceClient{cc}
}

func (c *functionsServiceClient) OHLC(ctx context.Context, in *OHLCReq, opts ...grpc.CallOption) (*api.Candles, error) {
	out := new(api.Candles)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/OHLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) WalletsBalance(ctx context.Context, in *api1.Void, opts ...grpc.CallOption) (*api.Wallets, error) {
	out := new(api.Wallets)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/WalletsBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) MarketStatistics(ctx context.Context, in *MarketStatisticsReq, opts ...grpc.CallOption) (*MarketStatisticsResp, error) {
	out := new(MarketStatisticsResp)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/MarketStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) MarketList(ctx context.Context, in *MarketListReq, opts ...grpc.CallOption) (*api.Markets, error) {
	out := new(api.Markets)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/MarketList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) NewOrder(ctx context.Context, in *NewOrderReq, opts ...grpc.CallOption) (*api2.Order, error) {
	out := new(api2.Order)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*api2.Order, error) {
	out := new(api2.Order)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) OrderStatus(ctx context.Context, in *OrderStatusReq, opts ...grpc.CallOption) (*api2.Order, error) {
	out := new(api2.Order)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/OrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) AsyncOHLC(ctx context.Context, in *OHLCReq, opts ...grpc.CallOption) (*api1.Void, error) {
	out := new(api1.Void)
	err := c.cc.Invoke(ctx, "/coreApi.FunctionsService/AsyncOHLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionsServiceServer is the server API for FunctionsService service.
// All implementations should embed UnimplementedFunctionsServiceServer
// for forward compatibility
type FunctionsServiceServer interface {
	OHLC(context.Context, *OHLCReq) (*api.Candles, error)
	WalletsBalance(context.Context, *api1.Void) (*api.Wallets, error)
	MarketStatistics(context.Context, *MarketStatisticsReq) (*MarketStatisticsResp, error)
	MarketList(context.Context, *MarketListReq) (*api.Markets, error)
	NewOrder(context.Context, *NewOrderReq) (*api2.Order, error)
	CancelOrder(context.Context, *CancelOrderReq) (*api2.Order, error)
	OrderStatus(context.Context, *OrderStatusReq) (*api2.Order, error)
	AsyncOHLC(context.Context, *OHLCReq) (*api1.Void, error)
}

// UnimplementedFunctionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFunctionsServiceServer struct {
}

func (UnimplementedFunctionsServiceServer) OHLC(context.Context, *OHLCReq) (*api.Candles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OHLC not implemented")
}
func (UnimplementedFunctionsServiceServer) WalletsBalance(context.Context, *api1.Void) (*api.Wallets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletsBalance not implemented")
}
func (UnimplementedFunctionsServiceServer) MarketStatistics(context.Context, *MarketStatisticsReq) (*MarketStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketStatistics not implemented")
}
func (UnimplementedFunctionsServiceServer) MarketList(context.Context, *MarketListReq) (*api.Markets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketList not implemented")
}
func (UnimplementedFunctionsServiceServer) NewOrder(context.Context, *NewOrderReq) (*api2.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedFunctionsServiceServer) CancelOrder(context.Context, *CancelOrderReq) (*api2.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedFunctionsServiceServer) OrderStatus(context.Context, *OrderStatusReq) (*api2.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderStatus not implemented")
}
func (UnimplementedFunctionsServiceServer) AsyncOHLC(context.Context, *OHLCReq) (*api1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncOHLC not implemented")
}

// UnsafeFunctionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionsServiceServer will
// result in compilation errors.
type UnsafeFunctionsServiceServer interface {
	mustEmbedUnimplementedFunctionsServiceServer()
}

func RegisterFunctionsServiceServer(s grpc.ServiceRegistrar, srv FunctionsServiceServer) {
	s.RegisterService(&FunctionsService_ServiceDesc, srv)
}

func _FunctionsService_OHLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OHLCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).OHLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/OHLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).OHLC(ctx, req.(*OHLCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_WalletsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).WalletsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/WalletsBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).WalletsBalance(ctx, req.(*api1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_MarketStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).MarketStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/MarketStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).MarketStatistics(ctx, req.(*MarketStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_MarketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).MarketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/MarketList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).MarketList(ctx, req.(*MarketListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).NewOrder(ctx, req.(*NewOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_OrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).OrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/OrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).OrderStatus(ctx, req.(*OrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_AsyncOHLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OHLCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).AsyncOHLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreApi.FunctionsService/AsyncOHLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).AsyncOHLC(ctx, req.(*OHLCReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionsService_ServiceDesc is the grpc.ServiceDesc for FunctionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreApi.FunctionsService",
	HandlerType: (*FunctionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OHLC",
			Handler:    _FunctionsService_OHLC_Handler,
		},
		{
			MethodName: "WalletsBalance",
			Handler:    _FunctionsService_WalletsBalance_Handler,
		},
		{
			MethodName: "MarketStatistics",
			Handler:    _FunctionsService_MarketStatistics_Handler,
		},
		{
			MethodName: "MarketList",
			Handler:    _FunctionsService_MarketList_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _FunctionsService_NewOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _FunctionsService_CancelOrder_Handler,
		},
		{
			MethodName: "OrderStatus",
			Handler:    _FunctionsService_OrderStatus_Handler,
		},
		{
			MethodName: "AsyncOHLC",
			Handler:    _FunctionsService_AsyncOHLC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/core/api/proto/src/functions.proto",
}
