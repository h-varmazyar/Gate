// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: services/brokerage/api/src/candle.proto

package api

import (
	context "context"
	api "github.com/mrNobody95/Gate/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CandleServiceClient is the client API for CandleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandleServiceClient interface {
	OHLC(ctx context.Context, in *OhlcRequest, opts ...grpc.CallOption) (*api.Candles, error)
}

type candleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandleServiceClient(cc grpc.ClientConnInterface) CandleServiceClient {
	return &candleServiceClient{cc}
}

func (c *candleServiceClient) OHLC(ctx context.Context, in *OhlcRequest, opts ...grpc.CallOption) (*api.Candles, error) {
	out := new(api.Candles)
	err := c.cc.Invoke(ctx, "/brokerageApi.CandleService/OHLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandleServiceServer is the server API for CandleService service.
// All implementations should embed UnimplementedCandleServiceServer
// for forward compatibility
type CandleServiceServer interface {
	OHLC(context.Context, *OhlcRequest) (*api.Candles, error)
}

// UnimplementedCandleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCandleServiceServer struct {
}

func (UnimplementedCandleServiceServer) OHLC(context.Context, *OhlcRequest) (*api.Candles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OHLC not implemented")
}

// UnsafeCandleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandleServiceServer will
// result in compilation errors.
type UnsafeCandleServiceServer interface {
	mustEmbedUnimplementedCandleServiceServer()
}

func RegisterCandleServiceServer(s grpc.ServiceRegistrar, srv CandleServiceServer) {
	s.RegisterService(&CandleService_ServiceDesc, srv)
}

func _CandleService_OHLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OhlcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandleServiceServer).OHLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brokerageApi.CandleService/OHLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandleServiceServer).OHLC(ctx, req.(*OhlcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandleService_ServiceDesc is the grpc.ServiceDesc for CandleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brokerageApi.CandleService",
	HandlerType: (*CandleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OHLC",
			Handler:    _CandleService_OHLC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/brokerage/api/src/candle.proto",
}
