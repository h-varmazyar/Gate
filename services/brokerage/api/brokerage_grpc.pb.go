// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: services/brokerage/api/src/brokerage.proto

package api

import (
	context "context"
	api "github.com/mrNobody95/Gate/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerageServiceClient is the client API for BrokerageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerageServiceClient interface {
	Add(ctx context.Context, in *Brokerage, opts ...grpc.CallOption) (*api.Void, error)
	ChangeStatus(ctx context.Context, in *api.Void, opts ...grpc.CallOption) (*BrokerageStatus, error)
}

type brokerageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerageServiceClient(cc grpc.ClientConnInterface) BrokerageServiceClient {
	return &brokerageServiceClient{cc}
}

func (c *brokerageServiceClient) Add(ctx context.Context, in *Brokerage, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/brokerageApi.BrokerageService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerageServiceClient) ChangeStatus(ctx context.Context, in *api.Void, opts ...grpc.CallOption) (*BrokerageStatus, error) {
	out := new(BrokerageStatus)
	err := c.cc.Invoke(ctx, "/brokerageApi.BrokerageService/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerageServiceServer is the server API for BrokerageService service.
// All implementations should embed UnimplementedBrokerageServiceServer
// for forward compatibility
type BrokerageServiceServer interface {
	Add(context.Context, *Brokerage) (*api.Void, error)
	ChangeStatus(context.Context, *api.Void) (*BrokerageStatus, error)
}

// UnimplementedBrokerageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBrokerageServiceServer struct {
}

func (UnimplementedBrokerageServiceServer) Add(context.Context, *Brokerage) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBrokerageServiceServer) ChangeStatus(context.Context, *api.Void) (*BrokerageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}

// UnsafeBrokerageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerageServiceServer will
// result in compilation errors.
type UnsafeBrokerageServiceServer interface {
	mustEmbedUnimplementedBrokerageServiceServer()
}

func RegisterBrokerageServiceServer(s grpc.ServiceRegistrar, srv BrokerageServiceServer) {
	s.RegisterService(&BrokerageService_ServiceDesc, srv)
}

func _BrokerageService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brokerage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerageServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brokerageApi.BrokerageService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerageServiceServer).Add(ctx, req.(*Brokerage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerageService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerageServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brokerageApi.BrokerageService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerageServiceServer).ChangeStatus(ctx, req.(*api.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerageService_ServiceDesc is the grpc.ServiceDesc for BrokerageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brokerageApi.BrokerageService",
	HandlerType: (*BrokerageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BrokerageService_Add_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _BrokerageService_ChangeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/brokerage/api/src/brokerage.proto",
}
