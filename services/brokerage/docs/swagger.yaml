openapi: 3.0.1
info:
  title: Brokerage API
  version: v0.2.0
servers:
  - url: 'http://localhost:11001'

paths:
  /brokerages:
    post:
      operationId: brokerage_add
      summary: Create a new brokerage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brokerage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brokerage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /brokerages/{id}:
    get:
      operationId: brokerage_get
      summary: Return a brokerage
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBrokerage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      operationId: brokerage_delete
      summary: delete a brokerage
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /brokerages/{id}/change-status:
    get:
      operationId: brokerage_status_change
      summary: change brokerage status
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /markets:
    put:
      operationId: market_set
      summary: Create or update a market
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Market'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /markets/{id}:
    delete:
      operationId: market_delete
      summary: delete a market
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /markets/brokerages/{brokerage_id}:
    get:
      operationId: market_list
      summary: get markets
      parameters:
        - $ref: '#/components/parameters/brokerage_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Markets'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /markets/names/{name}/brokerages/{brokerage_id}:
    get:
      operationId: market_get
      summary: get market
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/brokerage_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /markets/{id}/change-status:
    get:
      operationId: market_status_change
      summary: change market status
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    name:
      name: name
      in: path
      required: true
      schema:
        type: string
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    brokerage_id:
      name: brokerage_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    include:
      in: query
      name: include
      schema:
        type: string
      description: Embed related entities comma separated
    filter:
      in: query
      name: filter
      schema:
        type: string
      description: Filter entities with fields
    take:
      in: query
      name: take
      schema:
        type: integer
      description: Take records count
    skip:
      in: query
      name: skip
      schema:
        type: integer
      description: Skip records from top
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '503':
      description: Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      readOnly: true
      properties:
        message:
          type: string
          description: Localized error message
        details:
          type: array
          items:
            type: string
          description: Systematic error details
    Brokerage:
      type: object
      properties:
        name:
          type: integer
          description: brokerage name code
        auth:
          type: object
          properties:
            type:
              type: integer
              description: authentication type code
            static_token:
              type: string
              description: authentication token
            username:
              type: string
              description: username
            password:
              type: string
              description: password
        status:
          type: number
          description: brokerage status
    GetBrokerage:
      type: object
      properties:
        id:
          type: string
          description: brokerage id
          readOnly: true
          format: uuid
        name:
          type: string
          readOnly: true
          description: brokerage name
        auth_type:
          type: string
          readOnly: true
          description: authentication type
        status:
          type: string
          readOnly: true
          description: brokerage status
    Status:
      type: object
      readOnly: true
      properties:
        status:
          type: string
          readOnly: true
          description: brokerage status
    Market:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: market id
          format: uuid
        name:
          type: string
          description: market name
        status:
          type: number
          description: market status
        pricing_decimal:
          type: number
          description: pricing decimal
        trading_decimal:
          type: number
          description: trading decimal
        maker_fee_rate:
          type: number
          description: maker fee rate
        taker_fee_rate:
          type: number
          description: taker fee rate
        brokerage_id:
          type: string
          description: brokerage id
        destination_id:
          type: string
          description: destination id
        start_time:
          type: number
          format: 'date-time'
          description: start time
        min_amount:
          type: number
          description: min amount
        updated_at:
          type: number
          format: 'date-time'
          readOnly: true
          description: updated at
        source_id:
          type: string
          description: source id
        is_amm:
          type: boolean
          description: is amm market
    Markets:
      type: object
      readOnly: true
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/Market'