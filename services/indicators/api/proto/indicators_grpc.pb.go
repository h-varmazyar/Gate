// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services/indicators/api/proto/src/indicators.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndicatorServiceClient is the client API for IndicatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndicatorServiceClient interface {
	Register(ctx context.Context, in *IndicatorRegisterReq, opts ...grpc.CallOption) (*Indicator, error)
	Values(ctx context.Context, in *IndicatorValuesReq, opts ...grpc.CallOption) (*IndicatorValues, error)
}

type indicatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndicatorServiceClient(cc grpc.ClientConnInterface) IndicatorServiceClient {
	return &indicatorServiceClient{cc}
}

func (c *indicatorServiceClient) Register(ctx context.Context, in *IndicatorRegisterReq, opts ...grpc.CallOption) (*Indicator, error) {
	out := new(Indicator)
	err := c.cc.Invoke(ctx, "/indicatorApi.indicatorService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicatorServiceClient) Values(ctx context.Context, in *IndicatorValuesReq, opts ...grpc.CallOption) (*IndicatorValues, error) {
	out := new(IndicatorValues)
	err := c.cc.Invoke(ctx, "/indicatorApi.indicatorService/Values", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndicatorServiceServer is the server API for IndicatorService service.
// All implementations should embed UnimplementedIndicatorServiceServer
// for forward compatibility
type IndicatorServiceServer interface {
	Register(context.Context, *IndicatorRegisterReq) (*Indicator, error)
	Values(context.Context, *IndicatorValuesReq) (*IndicatorValues, error)
}

// UnimplementedIndicatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndicatorServiceServer struct {
}

func (UnimplementedIndicatorServiceServer) Register(context.Context, *IndicatorRegisterReq) (*Indicator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIndicatorServiceServer) Values(context.Context, *IndicatorValuesReq) (*IndicatorValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Values not implemented")
}

// UnsafeIndicatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndicatorServiceServer will
// result in compilation errors.
type UnsafeIndicatorServiceServer interface {
	mustEmbedUnimplementedIndicatorServiceServer()
}

func RegisterIndicatorServiceServer(s grpc.ServiceRegistrar, srv IndicatorServiceServer) {
	s.RegisterService(&IndicatorService_ServiceDesc, srv)
}

func _IndicatorService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicatorRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicatorServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indicatorApi.indicatorService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicatorServiceServer).Register(ctx, req.(*IndicatorRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicatorService_Values_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicatorValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicatorServiceServer).Values(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indicatorApi.indicatorService/Values",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicatorServiceServer).Values(ctx, req.(*IndicatorValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IndicatorService_ServiceDesc is the grpc.ServiceDesc for IndicatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndicatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indicatorApi.indicatorService",
	HandlerType: (*IndicatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _IndicatorService_Register_Handler,
		},
		{
			MethodName: "Values",
			Handler:    _IndicatorService_Values_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/indicators/api/proto/src/indicators.proto",
}
